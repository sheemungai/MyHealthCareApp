/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegistrationRouteImport } from './routes/registration'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as ContactsRouteImport } from './routes/contacts'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardUserRouteImport } from './routes/Dashboard/user'
import { Route as DashboardPatientRouteImport } from './routes/Dashboard/patient'
import { Route as DashboardAppointmentRouteImport } from './routes/Dashboard/appointment'

const RegistrationRoute = RegistrationRouteImport.update({
  id: '/registration',
  path: '/registration',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactsRoute = ContactsRouteImport.update({
  id: '/contacts',
  path: '/contacts',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardUserRoute = DashboardUserRouteImport.update({
  id: '/Dashboard/user',
  path: '/Dashboard/user',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardPatientRoute = DashboardPatientRouteImport.update({
  id: '/Dashboard/patient',
  path: '/Dashboard/patient',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardAppointmentRoute = DashboardAppointmentRouteImport.update({
  id: '/Dashboard/appointment',
  path: '/Dashboard/appointment',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contacts': typeof ContactsRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/registration': typeof RegistrationRoute
  '/Dashboard/appointment': typeof DashboardAppointmentRoute
  '/Dashboard/patient': typeof DashboardPatientRoute
  '/Dashboard/user': typeof DashboardUserRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contacts': typeof ContactsRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/registration': typeof RegistrationRoute
  '/Dashboard/appointment': typeof DashboardAppointmentRoute
  '/Dashboard/patient': typeof DashboardPatientRoute
  '/Dashboard/user': typeof DashboardUserRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contacts': typeof ContactsRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/registration': typeof RegistrationRoute
  '/Dashboard/appointment': typeof DashboardAppointmentRoute
  '/Dashboard/patient': typeof DashboardPatientRoute
  '/Dashboard/user': typeof DashboardUserRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/contacts'
    | '/dashboard'
    | '/login'
    | '/registration'
    | '/Dashboard/appointment'
    | '/Dashboard/patient'
    | '/Dashboard/user'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/contacts'
    | '/dashboard'
    | '/login'
    | '/registration'
    | '/Dashboard/appointment'
    | '/Dashboard/patient'
    | '/Dashboard/user'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/contacts'
    | '/dashboard'
    | '/login'
    | '/registration'
    | '/Dashboard/appointment'
    | '/Dashboard/patient'
    | '/Dashboard/user'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ContactsRoute: typeof ContactsRoute
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  RegistrationRoute: typeof RegistrationRoute
  DashboardAppointmentRoute: typeof DashboardAppointmentRoute
  DashboardPatientRoute: typeof DashboardPatientRoute
  DashboardUserRoute: typeof DashboardUserRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/registration': {
      id: '/registration'
      path: '/registration'
      fullPath: '/registration'
      preLoaderRoute: typeof RegistrationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contacts': {
      id: '/contacts'
      path: '/contacts'
      fullPath: '/contacts'
      preLoaderRoute: typeof ContactsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Dashboard/user': {
      id: '/Dashboard/user'
      path: '/Dashboard/user'
      fullPath: '/Dashboard/user'
      preLoaderRoute: typeof DashboardUserRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Dashboard/patient': {
      id: '/Dashboard/patient'
      path: '/Dashboard/patient'
      fullPath: '/Dashboard/patient'
      preLoaderRoute: typeof DashboardPatientRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Dashboard/appointment': {
      id: '/Dashboard/appointment'
      path: '/Dashboard/appointment'
      fullPath: '/Dashboard/appointment'
      preLoaderRoute: typeof DashboardAppointmentRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ContactsRoute: ContactsRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  RegistrationRoute: RegistrationRoute,
  DashboardAppointmentRoute: DashboardAppointmentRoute,
  DashboardPatientRoute: DashboardPatientRoute,
  DashboardUserRoute: DashboardUserRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
