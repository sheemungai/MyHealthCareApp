import { useGetAppointmentsByIdQuery } from '@/hooks/patients/appointmentHook'
import { useInitPayments } from '@/hooks/payments/paymentHook'
import { getUserEmailHelper } from '@/lib/authHelper'

interface AppointmentCardProps {
  appointment: {
    appointment_id: number
    patient_id: number
    doctor_id: number
    appointment_time: string
    payment_status: string
    status: string
    reason: string
    created_at: string
    authorization_url?: string
    payment_reference?: string
    payment_id?: number
  }
}

const AppointmentCard = ({ appointment }: AppointmentCardProps) => {
  const initPaymentMutation = useInitPayments()

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    })
  }

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'scheduled':
        return 'bg-blue-100 text-blue-800'
      case 'completed':
        return 'bg-green-100 text-green-800'
      case 'cancelled':
        return 'bg-red-100 text-red-800'
      default:
        return 'bg-gray-100 text-gray-800'
    }
  }

  const handlePayment = async () => {
    console.log('handlePayment called')
    console.log('appointment object:', appointment)
    console.log('authorization_url:', appointment.authorization_url)
    console.log('payment_status:', appointment.payment_status)

    if (appointment.authorization_url) {
      // Store payment reference for verification if needed
      if (appointment.payment_reference) {
        localStorage.setItem(
          'pending_payment_ref',
          appointment.payment_reference,
        )
        localStorage.setItem(
          'appointment_id',
          appointment.appointment_id.toString(),
        )
      }

      // Open Paystack payment page in new tab
      console.log('Opening URL:', appointment.authorization_url)
      window.open(appointment.authorization_url, '_blank')
      console.log(
        'Payment initiated for appointment:',
        appointment.appointment_id,
      )
    } else {
      // Initialize new payment for this appointment
      try {
        console.log('Initializing new payment...')
        const paymentData = {
          appointment_id: appointment.appointment_id,
          patient_id: appointment.patient_id,
          email: getUserEmailHelper(),
          doctor_id: appointment.doctor_id,
          payment_method: 'paystack',
          pharmacy_order_id: 0,
          status: 'pending',
          // Don't include fields that should be generated by backend:
          // payment_id, created_at, authorization_url, payment_reference
        }

        console.log('Sending payment data:', paymentData)
        const result = await initPaymentMutation.mutateAsync(paymentData)
        console.log('Payment initialization result:', result)

        if (result.authorization_url) {
          // Store payment reference for verification
          if (result.payment_reference) {
            localStorage.setItem(
              'pending_payment_ref',
              result.payment_reference,
            )
            localStorage.setItem(
              'appointment_id',
              appointment.appointment_id.toString(),
            )
          }

          // Open Paystack payment page
          console.log('Opening new payment URL:', result.authorization_url)
          window.open(result.authorization_url, '_blank')
        } else {
          throw new Error(
            'No authorization URL received from payment initialization',
          )
        }
      } catch (error: any) {
        console.error('Payment initialization failed:', error)
        console.error('Error details:', {
          message: error?.message,
          stack: error?.stack,
          error: error,
        })

        // Check if it's a network error or API error
        if (error?.response) {
          console.error('API Response Error:', {
            status: error.response.status,
            data: error.response.data,
          })
        }

        alert(
          `Failed to initialize payment. Error: ${error?.message || 'Unknown error'}`,
        )
      }
    }
  }

  return (
    <div className="max-w-md w-full p-6 bg-white rounded-lg shadow-md transition-all duration-300 hover:shadow-xl hover:-translate-y-1 border border-gray-200">
      <div className="flex justify-between items-start mb-4">
        <h3 className="text-xl font-semibold text-gray-800">
          Appointment #{appointment.appointment_id}
        </h3>
        <span
          className={`px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(
            appointment.status,
          )}`}
        >
          {appointment.status}
        </span>
      </div>

      <div className="space-y-2">
        <p className="text-gray-600">
          <span className="font-medium">Date & Time:</span>{' '}
          {formatDate(appointment.appointment_time)}
        </p>
        <p className="text-gray-600">
          <span className="font-medium">Doctor :</span> {appointment.doctor_id}
        </p>
        <p className="text-gray-600">
          <span className="font-medium">Reason:</span> {appointment.reason}
        </p>
        <p className="text-gray-500 text-sm">
          <span className="font-medium">Created:</span>{' '}
          {formatDate(appointment.created_at)}
        </p>
        <br></br>
      </div>

      {appointment.payment_status === 'unpaid' ||
      appointment.payment_status === 'pending' ? (
        <button
          onClick={handlePayment}
          disabled={initPaymentMutation.isPending}
          className="bg-blue-400 text-white px-4 py-2 rounded hover:bg-blue-500 transition-colors w-full disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {initPaymentMutation.isPending
            ? 'Initializing Payment...'
            : 'Make Payment'}
        </button>
      ) : (
        <button className="bg-green-400 text-white px-4 py-2 rounded hover:bg-green-500 transition-colors w-full">
          Payment Completed
        </button>
      )}
    </div>
  )
}

export const PatientAppointments = ({ patientId }: { patientId: number }) => {
  const {
    data: appointments,
    isLoading,
    isError,
    error,
    refetch,
  } = useGetAppointmentsByIdQuery(patientId)

  console.log('Appointments Data:', appointments)

  const handleRefresh = () => {
    refetch()
  }

  if (isLoading) {
    return <div className="text-center py-8">Loading appointments...</div>
  }

  if (isError) {
    return (
      <div className="text-center py-8 text-red-500">
        Error: {error.message}
      </div>
    )
  }

  // Check if appointments exists and is an array
  const appointmentsArray = Array.isArray(appointments)
    ? appointments
    : [appointments]

  if (!appointmentsArray || appointmentsArray.length === 0) {
    return (
      <div className="text-center py-8 text-gray-500">
        No appointments found for this patient.
      </div>
    )
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-gray-800">
          Patient Appointments
        </h2>
        <button
          onClick={handleRefresh}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors"
          disabled={isLoading}
        >
          {isLoading ? 'Loading...' : 'Refresh'}
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {appointmentsArray.map((appointment) => (
          <AppointmentCard
            key={appointment.appointment_id}
            appointment={appointment}
          />
        ))}
      </div>
    </div>
  )
}

export default PatientAppointments
